for(i in 1:6)
{
summary(c[[i]])
}
for(i in 1:6)
{
summary(c[[i]])
}
help(summary)
for (i in 1:6)
{
##plot(maxfreqItemsByCluster[[i]], method="graph", control=list(type="itemsets") )
}
for (i in 1:6)
{
##plot(maxfreqItemsByCluster[[i]], method="graph", control=list(type="itemsets") )
}
for (i in 1:6)
{
plot(head(sort(rulesByCluster[[i]] , by="chiSquared"), 5),method="graph", control=list(cex=.7))
}
for (i in 1:6)
{
plot(maxfreqItemsByCluster[[i]], method="graph", control=list(type="itemsets") )
}
for (i in 1:6)
{
plot(head(maxfreqItemsByCluster[[i]],by="lift",5), method="graph", control=list(type="itemsets") )
}
for (i in 1:6)
{
plot(head(sort(maxfreqItemsByCluster[[i]],by="lift"),5), method="graph", control=list(type="itemsets") )
}
for (i in 1:6)
{
plot(head(sort(maxfreqItemsByCluster[[i]],by="lift"),5))
}
for (i in 1:6)
{
plot(head(sort(maxfreqItemsByCluster[[i]],by="lift"),2))
}
for (i in 1:6)
{
plot(head(sort(maxfreqItemsByCluster[[i]],by="support"),5))
}
View(calcDissimilarity)
class(maxfreqItemsByCluster[[i]])
class(maxfreqItemsByCluster[[1]])
class(maxfreqItemsByCluster[[1,1]])
class(maxfreqItemsByCluster[[1]])
class(maxfreqItemsByCluster[1,1)
class(maxfreqItemsByCluster[1,1])
class(maxfreqItemsByCluster[1])
class(maxfreqItemsByCluster[1[]])
class(maxfreqItemsByCluster[1[1,]])
class(maxfreqItemsByCluster[1[1]])
class(maxfreqItemsByCluster[1[2]])
class(maxfreqItemsByCluster[2[2]])
class(maxfreqItemsByCluster[[2]])
class(maxfreqItemsByCluster[[1]])
maxfreqItemsByCluster = list()
for( i in 1:6)
{
maxfreqItemsByCluster[[i]] <- frqItms(c[[i]],0.5,"maximally frequent itemsets","info")
quality(maxfreqItemsByCluster[[i]])$lift <- measureItems(maxfreqItemsByCluster[[i]],"lift",transactions)
inspect(head(freqItemsByCluster[[i]],10,by="lift"))
}
for (i in 1:6)
{
plot(head(sort(maxfreqItemsByCluster[[i]],by="support"),10))
inspect(head(freqItemsByCluster[[i]],10,by="lift"))
}
for (i in 1:6)
{
plot(head(sort(maxfreqItemsByCluster[[i]],by="lift"),10))
inspect(head(freqItemsByCluster[[i]],10,by="lift"))
}
##get top freq items
rulesByCluster = list()
for(i in 1:6)
{
rulesByCluster[[i]] <-apriori(c[[i]],parameter = list(supp = 0.5, conf = 0.7, target = "rules"))
##rulesByCluster[[i]] <- get rules
rul <- getRules(c[[i]],0.5,0.7)
rul <- measureQuality(rul, transactions)
rulesByCluster[[i]] <- rul
}
source('D:/Temp/DataMining/main.R')
source("BasketAnalisysUtil.R")
source("RuleEvaluation.R")
rulesByCluster = list()
for(i in 1:6)
{
rulesByCluster[[i]] <-apriori(c[[i]],parameter = list(supp = 0.5, conf = 0.7, target = "rules"))
##rulesByCluster[[i]] <- get rules
rul <- getRules(c[[i]],0.5,0.7)
rul <- measureQuality(rul, transactions)
rulesByCluster[[i]] <- rul
}
source('D:/Temp/DataMining/RuleEvaluation.R')
rulesByCluster = list()
for(i in 1:6)
{
rulesByCluster[[i]] <-apriori(c[[i]],parameter = list(supp = 0.5, conf = 0.7, target = "rules"))
##rulesByCluster[[i]] <- get rules
rul <- getRules(c[[i]],0.5,0.7)
rul <- measureQuality(rul, transactions)
rulesByCluster[[i]] <- rul
}
source('D:/Temp/DataMining/RuleEvaluation.R')
rulesByCluster = list()
for(i in 1:6)
{
rulesByCluster[[i]] <-apriori(c[[i]],parameter = list(supp = 0.5, conf = 0.7, target = "rules"))
##rulesByCluster[[i]] <- get rules
rul <- getRules(c[[i]],0.5,0.7)
rul <- measureQuality(rul, transactions)
rulesByCluster[[i]] <- rul
}
help(interestMeasure)
source('D:/Temp/DataMining/RuleEvaluation.R')
rulesByCluster = list()
for(i in 1:6)
{
rulesByCluster[[i]] <-apriori(c[[i]],parameter = list(supp = 0.5, conf = 0.7, target = "rules"))
##rulesByCluster[[i]] <- get rules
rul <- getRules(c[[i]],0.5,0.7)
rul <- measureQuality(rul, transactions)
rulesByCluster[[i]] <- rul
}
for (i in 1:6)
{
plot(head(sort(rulesByCluster[[i]] , by="support"), 5),method="graph", control=list(cex=.7))
}
for (i in 1:6)
{
plot(head(sort(rulesByCluster[[i]] , by="support" , decreasing = TRUE), 5),method="graph", control=list(cex=.7))
}
help(sort)
for (i in 1:6)
{
plot(rulesByCluster[[i]],method="graph", control=list(cex=.7))
}
for (i in 1:6)
{
plot(head(sort(rulesByCluster[[1]] , by="support" , decreasing = TRUE), 5),method="graph", control=list(cex=.7))
}
for (i in 1:6)
{
plot(head(sort(rulesByCluster[[1]] , decreasing = TRUE), 5),method="graph", control=list(cex=.7))
}
class(rulesByCluster[[1]])
rulesByCluster = list()
for(i in 1:6)
{
rulesByCluster[[i]] <-apriori(c[[i]],parameter = list(supp = 0.5, conf = 0.7, target = "rules"))
##rulesByCluster[[i]] <- get rules
rul <- getRules(c[[i]],0.5,0.7)
rul <- measureQuality(rul, transactions)
rulesByCluster[[i]] <- rul
}
for (i in 1:6)
{
plot(head(sort(rulesByCluster[[1]] , decreasing = TRUE), 5),method="graph", control=list(cex=.7))
}
for (i in 1:6)
{
plot(head(sort(rulesByCluster[[2]] , decreasing = TRUE), 5),method="graph", control=list(cex=.7))
}
rulesByCluster = list()
for(i in 1:6)
{
rul <- getRules(c[[i]],0.4,0.6)
rul <- measureQuality(rul, transactions)
rulesByCluster[[i]] <- rul
}
help(interestMeasure)
rulesByCluster = list()
for(i in 1:6)
{
rul <- getRules(c[[i]],0.4,0.6)
rul <- measureQuality(rul, transactions)
rulesByCluster[[i]] <- rul
}
source('D:/Temp/DataMining/RuleEvaluation.R')
rulesByCluster = list()
for(i in 1:6)
{
rul <- getRules(c[[i]],0.4,0.6)
rul <- measureQuality(rul, transactions)
rulesByCluster[[i]] <- rul
}
rulesByCluster = list()
for(i in 1:6)
{
rul <- getRules(c[[i]],0.4,0.6)
rul <- measureQuality(rul, c[[i]])
rulesByCluster[[i]] <- rul
}
rul <- getRules(c[[1]],0.4,0.6)
rulesByCluster = list()
for(i in 1:6)
{
rul <- getRules(c[[i]],0.05,0.07)
rul <- measureQuality(rul, c[[i]])
rulesByCluster[[i]] <- rul
}
source('D:/Temp/DataMining/RuleEvaluation.R')
rulesByCluster = list()
for(i in 1:6)
{
rul <- getRules(c[[i]],0.05,0.07)
rul <- measureQuality(rul, c[[i]])
rulesByCluster[[i]] <- rul
}
rulesByCluster = list()
for(i in 1:6)
{
rul <- getRules(c[[i]],0.05,0.5)
rul <- measureQuality(rul, c[[i]])
rulesByCluster[[i]] <- rul
}
for (i in 1:6)
{
plot(head(sort(rulesByCluster[[i]], by="lift", decreasing = TRUE), 5),method="graph", control=list(cex=.7))
}
plot(head(sort(rulesByCluster[[1]], by="lift", decreasing = TRUE), 5),method="graph", control=list(cex=.7))
source('D:/Temp/DataMining/RuleEvaluation.R')
rulesByCluster = list()
for(i in 1:6)
{
rulesByCluster[[i]] <- getRules(c[[i]],0.05,0.5)
quality(rulesByCluster[[i]])$lift <- measureQuality(rul, c[[i]],"lift")
}
rulesByCluster = list()
for(i in 1:6)
{
rulesByCluster[[i]] <- getRules(c[[i]],0.05,0.5)
quality(rulesByCluster[[i]])$lift <- measureQuality(rulesByCluster[[i]], c[[i]],"lift")
}
plot(head(sort(rulesByCluster[[1]], by="lift", decreasing = TRUE), 5),method="graph", control=list(cex=.7))
plot(head(sort(rulesByCluster[[1]]$lift, decreasing = TRUE), 5),method="graph", control=list(cex=.7))
plot(head(sort(rulesByCluster[[1]] , decreasing = TRUE), 5),method="graph", control=list(cex=.7))
help(sort)
## plot(head(sort(rulesByCluster[[1]] , decreasing = TRUE), 5),method="graph", ## control=list(cex=.7))
summary(rulesByCluster[[1]])
## plot(head(sort(rulesByCluster[[1]] , decreasing = TRUE), 5),method="graph", ## control=list(cex=.7))
for(i in 1:6)
{
summary(rulesByCluster[[1]])
}
## plot(head(sort(rulesByCluster[[1]] , decreasing = TRUE), 5),method="graph", ## control=list(cex=.7))
for(i in 1:6)
{
summary(rulesByCluster[[1]])
}
## plot(head(sort(rulesByCluster[[1]] , decreasing = TRUE), 5),method="graph", ## control=list(cex=.7))
for(i in 1:6)
{
summary(rulesByCluster[[1]])
}
## plot(head(sort(rulesByCluster[[1]] , decreasing = TRUE), 5),method="graph", ## control=list(cex=.7))
for(i in 1:6)
summary(rulesByCluster[[1]])
## plot(head(sort(rulesByCluster[[1]] , decreasing = TRUE), 5),method="graph", ## control=list(cex=.7))
for(i in 1:6)
{
inspect(summary(rulesByCluster[[1]]))
}
## plot(head(sort(rulesByCluster[[1]] , decreasing = TRUE), 5),method="graph", ## control=list(cex=.7))
for(i in 1:6)
{
write.table(summary(rulesByCluster[[1]]))
}
## plot(head(sort(rulesByCluster[[1]] , decreasing = TRUE), 5),method="graph", ## control=list(cex=.7))
for(i in 1:6)
{
inspect(rulesByCluster[[1]])
}
## plot(head(sort(rulesByCluster[[1]] , decreasing = TRUE), 5),method="graph", ## control=list(cex=.7))
for(i in 1:6)
{
inspect(head(sort(rulesByCluster[[1]],by="lift"),5))
}
## plot(head(sort(rulesByCluster[[1]] , decreasing = TRUE), 5),method="graph", ## control=list(cex=.7))
for(i in 1:6)
{
inspect(head(sort(rulesByCluster[[1]],by="support"),5))
}
knitr::opts_chunk$set(echo = TRUE)
## plot(head(sort(rulesByCluster[[1]] , decreasing = TRUE), 5),method="graph", ## control=list(cex=.7))
for(i in 1:6)
{
inspect(head(sort(rulesByCluster[[i]],by="support"),5))
}
source("init.R")
summary(raw)
##plot(silhouette)
summary(transactions)
transactions <- dataFrameToTransaction(raw)
allLabels <- predict(transactions[clusteringVectors$medoids], transactions,method = "Jaccard")
##clusplot(cv, main = "Cluster plot, k = 6", color = TRUE)
c <- split(transactions, allLabels)
summary(c)
summary(c)
for (i in 1:6)
{
itemFrequencyPlot(c[[i]], population = transactions, support = 0.2)
}
##plot(silhouette)
summary(silhouette)
silhouette <- silhouette(clusteringVectors$clustering,diss)
##plot(silhouette)
summary(transactions)
##plot(silhouette)
summary(silhouette)
for (i in 1:6)
{
plot(head(sort(freqItemsByCluster[[i]] , by="support"), 5),method="graph",control=list(cex=.7))
}
freqItemsByCluster = list()
for( i in 1:6)
{
freqItemsByCluster[[i]] <- frqItms(c[[i]],0.5,"frequent itemsets","info")
quality(freqItemsByCluster[[i]])$lift <- measureItems(freqItemsByCluster[[i]],"support",transactions)
inspect(head(freqItemsByCluster[[i]],10,by="support"))
}
maxfreqItemsByCluster = list()
for( i in 1:6)
{
maxfreqItemsByCluster[[i]] <- frqItms(c[[i]],0.5,"maximally frequent itemsets","info")
quality(maxfreqItemsByCluster[[i]])$lift <- measureItems(maxfreqItemsByCluster[[i]],"lift",transactions)
}
##get top freq items
rulesByCluster = list()
for(i in 1:6)
{
rulesByCluster[[i]] <- getRules(c[[i]],0.05,0.5)
quality(rulesByCluster[[i]])$lift <- measureQuality(rulesByCluster[[i]], c[[i]],"lift")
}
source("clustering.R")
source("BasketAnalisysUtil.R")
source("RuleEvaluation.R")
##itemFrequencyPlot(c[[2]], population = transactions, support = 0.2)
freqItemsByCluster = list()
for( i in 1:6)
{
freqItemsByCluster[[i]] <- frqItms(c[[i]],0.5,"frequent itemsets","info")
quality(freqItemsByCluster[[i]])$lift <- measureItems(freqItemsByCluster[[i]],"support",transactions)
inspect(head(freqItemsByCluster[[i]],10,by="support"))
}
maxfreqItemsByCluster = list()
for( i in 1:6)
{
maxfreqItemsByCluster[[i]] <- frqItms(c[[i]],0.5,"maximally frequent itemsets","info")
quality(maxfreqItemsByCluster[[i]])$lift <- measureItems(maxfreqItemsByCluster[[i]],"lift",transactions)
}
##get top freq items
rulesByCluster = list()
for(i in 1:6)
{
rulesByCluster[[i]] <- getRules(c[[i]],0.05,0.5)
quality(rulesByCluster[[i]])$lift <- measureQuality(rulesByCluster[[i]], c[[i]],"lift")
}
for (i in 1:6)
{
plot(head(sort(freqItemsByCluster[[i]] , by="support"), 5),method="graph",control=list(cex=.7))
}
for (i in 1:6)
{
plot(head(sort(maxfreqItemsByCluster[[i]],by="lift"),10))
inspect(head(freqItemsByCluster[[i]],10,by="lift"))
}
## plot(head(sort(rulesByCluster[[1]] , decreasing = TRUE), 5),method="graph", ## control=list(cex=.7))
for(i in 1:6)
{
inspect(head(sort(rulesByCluster[[i]],by="support"),5))
}
install.packages("MiKTeX")
summary(raw)
knitr::opts_chunk$set(echo = TRUE)
summary(raw)
##plot(silhouette)
summary(transactions)
##plot(silhouette)
summary(silhouette)
summary(c)
for (i in 1:6)
{
itemFrequencyPlot(c[[i]], population = transactions, support = 0.2)
}
for (i in 1:6)
{
plot(head(sort(freqItemsByCluster[[i]] , by="support"), 5),method="graph",control=list(cex=.7))
}
for (i in 1:6)
{
plot(head(sort(maxfreqItemsByCluster[[i]],by="lift"),10))
inspect(head(freqItemsByCluster[[i]],10,by="lift"))
}
## plot(head(sort(rulesByCluster[[1]] , decreasing = TRUE), 5),method="graph", ## control=list(cex=.7))
for(i in 1:6)
{
inspect(head(sort(rulesByCluster[[i]],by="support"),5))
}
summary(raw)
summary(raw)
summary(raw)
table(summary(raw))
table(raw)
inspect(raw)
summary.data.frame(raw)
library(arulesViz)
##summary(c)
for (i in 1:6)
{
itemFrequencyPlot(c[[i]], population = transactions, support = 0.2)
}
library(arulesViz)
##summary(c)
for (i in 1:6)
{
itemFrequencyPlot(c[[i]], population = transactions, support = 0.2)
}
install.packages("pdflatex")
install.packages("http://miktex.org/2.9/setup")
install.packages("pdflatex")
summary(raw)
summary(raw)
if(!exists("raw", mode="object")){
raw <- source("loadData.R")
save(raw, file="myData.R")
}
raw <- load("myData.R")
summary(raw)
raw <- load("myData.R")
summary(raw)
if(!exists("raw", mode="object")){
raw <- source("loadData.R")
saveRDS(raw,"raw.rds")
}
raw <- readRDS("myData.R")
raw <- readRDS("raw.rds")
summary(raw)
raw <- readRDS("raw.rds")
summary(raw)
help(apriori)
source('C:/Users/ei08047/Desktop/DataMining/RuleEvaluation.R')
rulesByCluster = list()
for(i in 1:6)
{
rulesByCluster[[i]] <- getRules(c[[i]],0.05,0.5,2,8)
quality(rulesByCluster[[i]])$lift <- measureQuality(rulesByCluster[[i]], c[[i]],"lift")
}
##summary(raw)
summary(raw)
summary(raw[1])
summary(raw[1,])
summary(raw[[1]])
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
source('C:/Users/ei08047/Desktop/DataMining/main.R')
source('C:/Users/ei08047/Desktop/DataMining/main.R')
source('C:/Users/ei08047/Desktop/DataMining/clustering.R')
source('C:/Users/ei08047/Desktop/DataMining/main.R')
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
summary(c)
summary(raw)
knitr::opts_chunk$set(echo = TRUE)
load("session.RData")
knitr::opts_chunk$set(echo = TRUE)
load("C:\Users\ei08047\Desktop\DataMining\session.RData")
knitr::opts_chunk$set(echo = TRUE)
load("C:/Users/ei08047/Desktop/DataMining/session.RData")
knitr::opts_chunk$set(echo = TRUE)
load("C:\\Users\\ei08047\\Desktop\\DataMining\\session.RData")
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
source("main.R")
plot(silhouette)
summary(transactions)
summary(silhouette)
summary(transactions)
clusplot(cv, main = "Cluster plot, k = 6", color = TRUE)
clusplot(clusteringVectors, main = "Cluster plot, k = 6", color = TRUE)
clusplot(c[[1]], main = "Cluster plot, k = 6", color = TRUE)
clusplot(c[[1]]$clustering, main = "Cluster plot, k = 6", color = TRUE)
clusplot(c, main = "Cluster plot, k = 6", color = TRUE)
clusplot(c$`1`, main = "Cluster plot, k = 6", color = TRUE)
freqItemsByCluster = list()
for( i in 1:6)
{
freqItemsByCluster[[i]] <- frqItms(c[[i]],0.5,"frequent itemsets","info")
quality(freqItemsByCluster[[i]])$lift <- measureItems(freqItemsByCluster[[i]],"lift",transactions)
inspect(head(freqItemsByCluster[[i]],5,by="support"))
}
freqItemsByCluster = list()
for( i in 1:6)
{
freqItemsByCluster[[i]] <- frqItms(c[[i]],0.5,"frequent itemsets","info")
quality(freqItemsByCluster[[i]])$lift <- measureItems(freqItemsByCluster[[i]],"lift",transactions)
inspect(head(freqItemsByCluster[[i]],5,by="lift"))
}
for(i in 1:6)
{
plot(head(sort(rulesByCluster[[i]] , decreasing = TRUE), 5),method="graph", control=list(cex=.7))
inspect(head(sort(rulesByCluster[[i]],by="lift"),5))
}
source("main.R")
