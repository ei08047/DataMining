help(discretize)
library(readr)
library(arules)
source("clustering.R")
if(!exists("init", mode="function")){source("init.R")}
if(!exists("raw", mode="object")){raw <- as.(source("loadData.R"),"dataFrame")}
if(!exists("transactions", mode="object")){transactions <- dataFrameToTransaction(raw)}
source("clustering.R")
if(!exists("init", mode="function")){source("init.R")}
if(!exists("raw", mode="object")){raw <- as.(source("loadData.R"),"dataFrame")}
source("clustering.R")
if(!exists("init", mode="function")){source("init.R")}
if(!exists("raw", mode="object")){raw <- source("loadData.R")}
class(raw)
transactions <- dataFrameToTransaction(raw)
source('D:/Temp/DataMining/loadData.R')
if(!exists("transactions", mode="object")){transactions <- dataFrameToTransaction(raw)}
if(!exists("diss", mode="object")){diss <- readDissFromFile()}
clusteringVectors <- getClusteringVectors(diss)
clu <- hCluster(diss)
##plot hClust
allLabels <- predict(transactions[clusteringVectors$medoids], transactions,method = "Jaccard")
##clusplot(cv, main = "Cluster plot, k = 6", color = TRUE)
c <- split(transactions, allLabels)
summary(c)
source('D:/Temp/DataMining/BasketAnalisysUtil.R')
for( i in 1:6)
{
freqItemsByCluster[[i]] <- frqItms(c[[i]],0.5,"frequent itemsets","info")
##freqItemsByCluster[[i]] <- apriori(c[[i]], parameter= list(support=0.5, target= "frequent itemsets"))
##freqItemsByCluster[[i]].sorted <- sort(freqItemsByCluster[[i]], by="support")
measureItems(freqItemsByCluster[[i]])
##quality(freqItemsByCluster[[i]])$lift <- interestMeasure(freqItemsByCluster[[i]], measure="lift", transactions = c[[i]] ,reuse=FALSE)
}
freqItemsByCluster = list()
for( i in 1:6)
{
freqItemsByCluster[[i]] <- frqItms(c[[i]],0.5,"frequent itemsets","info")
##freqItemsByCluster[[i]] <- apriori(c[[i]], parameter= list(support=0.5, target= "frequent itemsets"))
##freqItemsByCluster[[i]].sorted <- sort(freqItemsByCluster[[i]], by="support")
measureItems(freqItemsByCluster[[i]])
##quality(freqItemsByCluster[[i]])$lift <- interestMeasure(freqItemsByCluster[[i]], measure="lift", transactions = c[[i]] ,reuse=FALSE)
}
source('D:/Temp/DataMining/BasketAnalisysUtil.R')
##itemFrequencyPlot(c[[2]], population = transactions, support = 0.2)
freqItemsByCluster = list()
for( i in 1:6)
{
freqItemsByCluster[[i]] <- frqItms(c[[i]],0.5,"frequent itemsets","info")
##freqItemsByCluster[[i]] <- apriori(c[[i]], parameter= list(support=0.5, target= "frequent itemsets"))
##freqItemsByCluster[[i]].sorted <- sort(freqItemsByCluster[[i]], by="support")
quality(freqItemsByCluster[[i]])$lift <- measureItems(freqItemsByCluster[[i]],c[[i]])
}
summary(freqItemsByCluster)
summary(freqItemsByCluster[1,])
summary(freqItemsByCluster[1])
summary(freqItemsByCluster[1].itemSetInfo())
summary(freqItemsByCluster[1,1].itemSetInfo())
summary(freqItemsByCluster[1[1,]].itemSetInfo())
inspect(head(freqItemsByCluster[[i]],5))
inspect(head(freqItemsByCluster[[1]],10))
help(head)
inspect(head(freqItemsByCluster[[i]],10,by="lift"))
##itemFrequencyPlot(c[[2]], population = transactions, support = 0.2)
freqItemsByCluster = list()
for( i in 1:6)
{
freqItemsByCluster[[i]] <- frqItms(c[[i]],0.5,"frequent itemsets","info")
##freqItemsByCluster[[i]] <- apriori(c[[i]], parameter= list(support=0.5, target= "frequent itemsets"))
quality(freqItemsByCluster[[i]])$lift <- measureItems(freqItemsByCluster[[i]],transactions)#c[[i]]
freqItemsByCluster[[i]].sorted <- sort(freqItemsByCluster[[i]], by="support")
inspect(head(freqItemsByCluster[[i]],10,by="lift"))
}
freqItemsByCluster = list()
for( i in 1:6)
{
freqItemsByCluster[[i]] <- frqItms(c[[i]],0.5,"frequent itemsets","info")
##freqItemsByCluster[[i]] <- apriori(c[[i]], parameter= list(support=0.5, target= "frequent itemsets"))
quality(freqItemsByCluster[[i]])$lift <- measureItems(freqItemsByCluster[[i]],c[[i]])#c[[i]]
freqItemsByCluster[[i]].sorted <- sort(freqItemsByCluster[[i]], by="support")
inspect(head(freqItemsByCluster[[i]],10,by="lift"))
}
freqItemsByCluster = list()
for( i in 1:6)
{
freqItemsByCluster[[i]] <- frqItms(c[[i]],0.5,"frequent itemsets","info")
##freqItemsByCluster[[i]] <- apriori(c[[i]], parameter= list(support=0.5, target= "frequent itemsets"))
quality(freqItemsByCluster[[i]])$lift <- measureItems(freqItemsByCluster[[i]],c[[i]])#c[[i]]
##freqItemsByCluster[[i]].sorted <- sort(freqItemsByCluster[[i]], by="support")
inspect(head(freqItemsByCluster[[i]],10,by="lift"))
}
freqItemsByCluster = list()
for( i in 1:6)
{
freqItemsByCluster[[i]] <- frqItms(c[[i]],0.5,"frequent itemsets","info")
##freqItemsByCluster[[i]] <- apriori(c[[i]], parameter= list(support=0.5, target= "frequent itemsets"))
quality(freqItemsByCluster[[i]])$lift <- measureItems(freqItemsByCluster[[i]],transactions)#c[[i]]
##freqItemsByCluster[[i]].sorted <- sort(freqItemsByCluster[[i]], by="support")
inspect(head(freqItemsByCluster[[i]],10,by="lift"))
}
maxfreqItemsByCluster = list()
for( i in 1:6)
{
maxfreqItemsByCluster[[i]] <- frqItms(c[[i]],0.5,"maximally frequent itemsets","info")
quality(maxfreqItemsByCluster[[i]])$lift <- measureItems(freqItemsByCluster[[i]],"lift",transactions)
}
maxfreqItemsByCluster = list()
for( i in 1:6)
{
maxfreqItemsByCluster[[i]] <- frqItms(c[[i]],0.5,"maximally frequent itemsets","info")
quality(maxfreqItemsByCluster[[i]])$lift <- measureItems(freqItemsByCluster[[i]],"lift",transactions)
}
maxfreqItemsByCluster = list()
for( i in 1:6)
{
maxfreqItemsByCluster[[i]] <- frqItms(c[[i]],0.5,"maximally frequent itemsets","info")
quality(maxfreqItemsByCluster[[i]])$lift <- measureItems(maxfreqItemsByCluster[[i]],"lift",transactions)
}
help(interestMeasure)
source('D:/Temp/DataMining/BasketAnalisysUtil.R')
maxfreqItemsByCluster = list()
for( i in 1:6)
{
maxfreqItemsByCluster[[i]] <- frqItms(c[[i]],0.5,"maximally frequent itemsets","info")
quality(maxfreqItemsByCluster[[i]])$lift <- measureItems(maxfreqItemsByCluster[[i]],"lift")
}
source('D:/Temp/DataMining/BasketAnalisysUtil.R')
maxfreqItemsByCluster = list()
for( i in 1:6)
{
maxfreqItemsByCluster[[i]] <- frqItms(c[[i]],0.5,"maximally frequent itemsets","info")
quality(maxfreqItemsByCluster[[i]])$lift <- measureItems(maxfreqItemsByCluster[[i]],"lift",transactions)
}
maxfreqItemsByCluster = list()
for( i in 1:6)
{
maxfreqItemsByCluster[[i]] <- frqItms(c[[i]],0.5,"maximally frequent itemsets","info")
quality(maxfreqItemsByCluster[[i]])$lift <- measureItems(maxfreqItemsByCluster[[i]],"lift",transactions)
inspect(head(freqItemsByCluster[[i]],10,by="lift"))
}
maxfreqItemsByCluster = list()
for( i in 1:6)
{
maxfreqItemsByCluster[[i]] <- frqItms(c[[i]],0.5,"maximally frequent itemsets","info")
quality(maxfreqItemsByCluster[[i]])$lift <- measureItems(maxfreqItemsByCluster[[i]],"lift",transactions)
inspect(class(head(freqItemsByCluster[[i]],10,by="lift")))
}
class(freqItemsByCluster[[i]])
help(markdown)
??markdown
knitr::opts_chunk$set(echo = TRUE)
summary(raw)
plot(clusteringVectors)
##plot(clu)
plot(clu, labels = NULL, hang = 0.1, check = TRUE,
axes = TRUE, frame.plot = FALSE, ann = TRUE,
main = "Cluster Dendrogram",
sub = NULL, xlab = NULL)
plot(clu)
plot(c)
for (i in 1:6)
{
itemFrequencyPlot(c[[i]], population = transactions, support = 0.2)
}
for (i in 1:6)
{
plot(head(sort(freqItemsByCluster[[i]] , by="lift"), 5),method="graph",control=list(cex=.7))
}
for (i in 1:6)
{
plot(head(sort(freqItemsByCluster[[i]] , by="support"), 5),method="graph",control=list(cex=.7))
}
help(itemFrequencyPlot)
plot(c)
c.stats()
silhouette <- silhouette(clusteringVectors$clustering,diss)
plot(silhouette)
plot(silhouette)
summary(silhouette)
plot(silhouette)
plot(silhouette)
plot(silhouette, col = c("red", "green", "blue", "purple","red","red"))# with cluster-wise coloring
summary(silhouette)
plot(silhouette)
plot(silhouette, col = c("red", "green", "blue", "purple","red","red"))# with cluster-wise coloring
summary(silhouette)
help("cutree")
##plot(silhouette)
summary(silhouette)
summary(c)
##plot(silhouette)
summary(transactions)
summary(c[[1]])
for(i in 1:6)
{
summary(c[[1]])
}
for(i in 1:6)
{
summary(c[[i]])
}
for(i in 1:6)
{
summary(c[[i]])
}
for(i in 1:6)
{
summary(c[[i]])
}
summary(c)
summary(c[[1:6]])
summary(c[[1:6,]])
summary(c[[1,]])
summary(c[[1]])
summary(c[[2]])
for(i in 1:6)
{
summary(c[[i]])
}
for(i in 1:6)
{
summary(c[[i]])
}
for(i in 1:6)
{
summary(c[[i]])
}
for(i in 1:6)
{
summary(c[[i]])
}
help(summary)
for (i in 1:6)
{
##plot(maxfreqItemsByCluster[[i]], method="graph", control=list(type="itemsets") )
}
for (i in 1:6)
{
##plot(maxfreqItemsByCluster[[i]], method="graph", control=list(type="itemsets") )
}
for (i in 1:6)
{
plot(head(sort(rulesByCluster[[i]] , by="chiSquared"), 5),method="graph", control=list(cex=.7))
}
for (i in 1:6)
{
plot(maxfreqItemsByCluster[[i]], method="graph", control=list(type="itemsets") )
}
for (i in 1:6)
{
plot(head(maxfreqItemsByCluster[[i]],by="lift",5), method="graph", control=list(type="itemsets") )
}
for (i in 1:6)
{
plot(head(sort(maxfreqItemsByCluster[[i]],by="lift"),5), method="graph", control=list(type="itemsets") )
}
for (i in 1:6)
{
plot(head(sort(maxfreqItemsByCluster[[i]],by="lift"),5))
}
for (i in 1:6)
{
plot(head(sort(maxfreqItemsByCluster[[i]],by="lift"),2))
}
for (i in 1:6)
{
plot(head(sort(maxfreqItemsByCluster[[i]],by="support"),5))
}
View(calcDissimilarity)
class(maxfreqItemsByCluster[[i]])
class(maxfreqItemsByCluster[[1]])
class(maxfreqItemsByCluster[[1,1]])
class(maxfreqItemsByCluster[[1]])
class(maxfreqItemsByCluster[1,1)
class(maxfreqItemsByCluster[1,1])
class(maxfreqItemsByCluster[1])
class(maxfreqItemsByCluster[1[]])
class(maxfreqItemsByCluster[1[1,]])
class(maxfreqItemsByCluster[1[1]])
class(maxfreqItemsByCluster[1[2]])
class(maxfreqItemsByCluster[2[2]])
class(maxfreqItemsByCluster[[2]])
class(maxfreqItemsByCluster[[1]])
maxfreqItemsByCluster = list()
for( i in 1:6)
{
maxfreqItemsByCluster[[i]] <- frqItms(c[[i]],0.5,"maximally frequent itemsets","info")
quality(maxfreqItemsByCluster[[i]])$lift <- measureItems(maxfreqItemsByCluster[[i]],"lift",transactions)
inspect(head(freqItemsByCluster[[i]],10,by="lift"))
}
for (i in 1:6)
{
plot(head(sort(maxfreqItemsByCluster[[i]],by="support"),10))
inspect(head(freqItemsByCluster[[i]],10,by="lift"))
}
for (i in 1:6)
{
plot(head(sort(maxfreqItemsByCluster[[i]],by="lift"),10))
inspect(head(freqItemsByCluster[[i]],10,by="lift"))
}
##get top freq items
rulesByCluster = list()
for(i in 1:6)
{
rulesByCluster[[i]] <-apriori(c[[i]],parameter = list(supp = 0.5, conf = 0.7, target = "rules"))
##rulesByCluster[[i]] <- get rules
rul <- getRules(c[[i]],0.5,0.7)
rul <- measureQuality(rul, transactions)
rulesByCluster[[i]] <- rul
}
source('D:/Temp/DataMining/main.R')
source("BasketAnalisysUtil.R")
source("RuleEvaluation.R")
rulesByCluster = list()
for(i in 1:6)
{
rulesByCluster[[i]] <-apriori(c[[i]],parameter = list(supp = 0.5, conf = 0.7, target = "rules"))
##rulesByCluster[[i]] <- get rules
rul <- getRules(c[[i]],0.5,0.7)
rul <- measureQuality(rul, transactions)
rulesByCluster[[i]] <- rul
}
source('D:/Temp/DataMining/RuleEvaluation.R')
rulesByCluster = list()
for(i in 1:6)
{
rulesByCluster[[i]] <-apriori(c[[i]],parameter = list(supp = 0.5, conf = 0.7, target = "rules"))
##rulesByCluster[[i]] <- get rules
rul <- getRules(c[[i]],0.5,0.7)
rul <- measureQuality(rul, transactions)
rulesByCluster[[i]] <- rul
}
source('D:/Temp/DataMining/RuleEvaluation.R')
rulesByCluster = list()
for(i in 1:6)
{
rulesByCluster[[i]] <-apriori(c[[i]],parameter = list(supp = 0.5, conf = 0.7, target = "rules"))
##rulesByCluster[[i]] <- get rules
rul <- getRules(c[[i]],0.5,0.7)
rul <- measureQuality(rul, transactions)
rulesByCluster[[i]] <- rul
}
help(interestMeasure)
source('D:/Temp/DataMining/RuleEvaluation.R')
rulesByCluster = list()
for(i in 1:6)
{
rulesByCluster[[i]] <-apriori(c[[i]],parameter = list(supp = 0.5, conf = 0.7, target = "rules"))
##rulesByCluster[[i]] <- get rules
rul <- getRules(c[[i]],0.5,0.7)
rul <- measureQuality(rul, transactions)
rulesByCluster[[i]] <- rul
}
for (i in 1:6)
{
plot(head(sort(rulesByCluster[[i]] , by="support"), 5),method="graph", control=list(cex=.7))
}
for (i in 1:6)
{
plot(head(sort(rulesByCluster[[i]] , by="support" , decreasing = TRUE), 5),method="graph", control=list(cex=.7))
}
help(sort)
for (i in 1:6)
{
plot(rulesByCluster[[i]],method="graph", control=list(cex=.7))
}
for (i in 1:6)
{
plot(head(sort(rulesByCluster[[1]] , by="support" , decreasing = TRUE), 5),method="graph", control=list(cex=.7))
}
for (i in 1:6)
{
plot(head(sort(rulesByCluster[[1]] , decreasing = TRUE), 5),method="graph", control=list(cex=.7))
}
class(rulesByCluster[[1]])
rulesByCluster = list()
for(i in 1:6)
{
rulesByCluster[[i]] <-apriori(c[[i]],parameter = list(supp = 0.5, conf = 0.7, target = "rules"))
##rulesByCluster[[i]] <- get rules
rul <- getRules(c[[i]],0.5,0.7)
rul <- measureQuality(rul, transactions)
rulesByCluster[[i]] <- rul
}
for (i in 1:6)
{
plot(head(sort(rulesByCluster[[1]] , decreasing = TRUE), 5),method="graph", control=list(cex=.7))
}
for (i in 1:6)
{
plot(head(sort(rulesByCluster[[2]] , decreasing = TRUE), 5),method="graph", control=list(cex=.7))
}
rulesByCluster = list()
for(i in 1:6)
{
rul <- getRules(c[[i]],0.4,0.6)
rul <- measureQuality(rul, transactions)
rulesByCluster[[i]] <- rul
}
help(interestMeasure)
rulesByCluster = list()
for(i in 1:6)
{
rul <- getRules(c[[i]],0.4,0.6)
rul <- measureQuality(rul, transactions)
rulesByCluster[[i]] <- rul
}
source('D:/Temp/DataMining/RuleEvaluation.R')
rulesByCluster = list()
for(i in 1:6)
{
rul <- getRules(c[[i]],0.4,0.6)
rul <- measureQuality(rul, transactions)
rulesByCluster[[i]] <- rul
}
rulesByCluster = list()
for(i in 1:6)
{
rul <- getRules(c[[i]],0.4,0.6)
rul <- measureQuality(rul, c[[i]])
rulesByCluster[[i]] <- rul
}
rul <- getRules(c[[1]],0.4,0.6)
rulesByCluster = list()
for(i in 1:6)
{
rul <- getRules(c[[i]],0.05,0.07)
rul <- measureQuality(rul, c[[i]])
rulesByCluster[[i]] <- rul
}
source('D:/Temp/DataMining/RuleEvaluation.R')
rulesByCluster = list()
for(i in 1:6)
{
rul <- getRules(c[[i]],0.05,0.07)
rul <- measureQuality(rul, c[[i]])
rulesByCluster[[i]] <- rul
}
rulesByCluster = list()
for(i in 1:6)
{
rul <- getRules(c[[i]],0.05,0.5)
rul <- measureQuality(rul, c[[i]])
rulesByCluster[[i]] <- rul
}
for (i in 1:6)
{
plot(head(sort(rulesByCluster[[i]], by="lift", decreasing = TRUE), 5),method="graph", control=list(cex=.7))
}
plot(head(sort(rulesByCluster[[1]], by="lift", decreasing = TRUE), 5),method="graph", control=list(cex=.7))
source('D:/Temp/DataMining/RuleEvaluation.R')
rulesByCluster = list()
for(i in 1:6)
{
rulesByCluster[[i]] <- getRules(c[[i]],0.05,0.5)
quality(rulesByCluster[[i]])$lift <- measureQuality(rul, c[[i]],"lift")
}
rulesByCluster = list()
for(i in 1:6)
{
rulesByCluster[[i]] <- getRules(c[[i]],0.05,0.5)
quality(rulesByCluster[[i]])$lift <- measureQuality(rulesByCluster[[i]], c[[i]],"lift")
}
plot(head(sort(rulesByCluster[[1]], by="lift", decreasing = TRUE), 5),method="graph", control=list(cex=.7))
plot(head(sort(rulesByCluster[[1]]$lift, decreasing = TRUE), 5),method="graph", control=list(cex=.7))
plot(head(sort(rulesByCluster[[1]] , decreasing = TRUE), 5),method="graph", control=list(cex=.7))
help(sort)
## plot(head(sort(rulesByCluster[[1]] , decreasing = TRUE), 5),method="graph", ## control=list(cex=.7))
summary(rulesByCluster[[1]])
## plot(head(sort(rulesByCluster[[1]] , decreasing = TRUE), 5),method="graph", ## control=list(cex=.7))
for(i in 1:6)
{
summary(rulesByCluster[[1]])
}
## plot(head(sort(rulesByCluster[[1]] , decreasing = TRUE), 5),method="graph", ## control=list(cex=.7))
for(i in 1:6)
{
summary(rulesByCluster[[1]])
}
## plot(head(sort(rulesByCluster[[1]] , decreasing = TRUE), 5),method="graph", ## control=list(cex=.7))
for(i in 1:6)
{
summary(rulesByCluster[[1]])
}
## plot(head(sort(rulesByCluster[[1]] , decreasing = TRUE), 5),method="graph", ## control=list(cex=.7))
for(i in 1:6)
summary(rulesByCluster[[1]])
## plot(head(sort(rulesByCluster[[1]] , decreasing = TRUE), 5),method="graph", ## control=list(cex=.7))
for(i in 1:6)
{
inspect(summary(rulesByCluster[[1]]))
}
## plot(head(sort(rulesByCluster[[1]] , decreasing = TRUE), 5),method="graph", ## control=list(cex=.7))
for(i in 1:6)
{
write.table(summary(rulesByCluster[[1]]))
}
## plot(head(sort(rulesByCluster[[1]] , decreasing = TRUE), 5),method="graph", ## control=list(cex=.7))
for(i in 1:6)
{
inspect(rulesByCluster[[1]])
}
## plot(head(sort(rulesByCluster[[1]] , decreasing = TRUE), 5),method="graph", ## control=list(cex=.7))
for(i in 1:6)
{
inspect(head(sort(rulesByCluster[[1]],by="lift"),5))
}
## plot(head(sort(rulesByCluster[[1]] , decreasing = TRUE), 5),method="graph", ## control=list(cex=.7))
for(i in 1:6)
{
inspect(head(sort(rulesByCluster[[1]],by="support"),5))
}
