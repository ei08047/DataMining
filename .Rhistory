if(!exists("raw"))
raw <- init()
summary(raw)
knitr::opts_chunk$set(echo = TRUE)
exists("libs")
libs <- init()
##summary(libs)
if(!exists("raw"))
raw <- init()
plot(pressure)
if(!exists("transactions"))
transactions <- dataFrameToTransaction()
if(!exists("transactions"))
transactions <- dataFrameToTransaction()
summary(transactions)
```{r diss}
```{r}
```{r di}
```{r transactions}
if(exists("transactions"))
s <- getSample(transactions,2000)
diss <- calcDissimilarity(transactions)
cv <- getClusteringVectors(diss)
##s <- silhouette(transactions,cv)
clu <- hCluster(diss)
plot(clu)
```
```{r cv, echo=FALSE}
plot(cv)
```
```{r diss}
if(!exists("diss"))
diss <- calcDissimilarity(transactions)
cv <- getClusteringVectors(diss)
```
```{r diss}
source('C:/Users/José/Desktop/dmProject/DataMining/clustering.R')
```{r diss}
```{r}
knitr::opts_chunk$set(echo = TRUE)
exists("libs")
libs <- init()
##summary(libs)
if(!exists("raw"))
raw <- init()
if(!exists("transactions"))
transactions <- dataFrameToTransaction()
if(!exists("diss"))
diss <- calcDissimilarity(transactions)
cv <- getClusteringVectors(diss)
plot(cv)
plot(pressure)
---
title: "report"
author: "José Ferreira"
date: "13 de Março de 2017"
output: pdf_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r echo=FALSE}
exists("libs")
libs <- init()
##summary(libs)
```
```{r raw}
if(!exists("raw"))
print("all good")
```
```{r transactions}
if(!exists("transactions"))
print("all good")
```
```{r}
if(!exists("diss"))
diss <- calcDissimilarity(transactions)
print("all good")
```
```{r cv}
plot(cv)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
---
title: "report"
author: "José Ferreira"
date: "13 de Março de 2017"
output: pdf_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r echo=FALSE}
exists("libs")
libs <- init()
##summary(libs)
```
```{r raw}
if(!exists("raw"))
print("all good")
```
```{r transactions}
if(!exists("transactions"))
print("all good")
```
```{r}
if(!exists("diss"))
diss <- calcDissimilarity(transactions)
print("all good")
```
```{r cv}
plot(cv)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
knitr::opts_chunk$set(echo = TRUE)
exists("libs")
libs <- init()
##summary(libs)
if(!exists("raw"))
print("all good")
if(!exists("diss"))
diss <- calcDissimilarity(transactions)
print("all good")
print(raw$info)
inspect(raw)
```{r raw}
```{r raw}
raw <- readDataFrame()
transactions <- dataFrameToTransaction(raw)
source('C:/Users/José/Desktop/dmProject/DataMining/loadData.R')
raw <- readDataFrame()
transactions <- dataFrameToTransaction(raw)
s <- getSample(transactions,2000)
summary(raw)
```{r diss}
plot(cv)
clusplot(clu)
plot(clu)
```{r c, echo=FALSE}
c <- split(transactions, allLabels)
```{r c, echo=FALSE}
itemFrequencyPlot(c[[2]], population = transactions, support = 0.2)
itemFrequencyPlot(c[[1]], population = transactions, support = 0.2)
itemFrequencyPlot(c[[2]], population = transactions, support = 0.2)
itemFrequencyPlot(c[[1]], population = transactions, support = 0.2)
itemFrequencyPlot(c[[2]], population = transactions, support = 0.2)
itemFrequencyPlot(c[[3]], population = transactions, support = 0.2)
itemFrequencyPlot(c[[4]], population = transactions, support = 0.2)
itemFrequencyPlot(c[[5]], population = transactions, support = 0.2)
itemFrequencyPlot(c[[6]], population = transactions, support = 0.2)
if(!exists("init", mode="function")) source("load.R")
if(!exists("dataFrameToTransaction", mode="function")) source("loadData.R")
if(!exists("calcDissimilarity", mode="function")) source("clustering.R")
init()
raw <- readDataFrame()
transactions <- dataFrameToTransaction(raw)
s <- getSample(transactions,2000)
diss <- calcDissimilarity(transactions)
cv <- getClusteringVectors(diss)
##s <- silhouette(transactions,cv)
## compare original and processed df
clu <- hCluster(diss)
##plot hClust
allLabels <- predict(transactions[cv$medoids], transactions,method = "Jaccard")
##clusplot(cv, main = "Cluster plot, k = 6", color = TRUE)
c <- split(transactions, allLabels)
##itemFrequencyPlot(c[[2]], population = transactions, support = 0.2)
for( i in 1:6)
{
c[[i]]$freqItems <- apriori(c[[6]], parameter= list(support=0.1, target= "frequent itemsets"))
c[[i]]$freqItemssorted <- sort(c[[i]]$freqItems, by="support")
quality(c[[i]]$freqItems)$lift <- interestMeasure(c[[i]]$freqItems, measure="lift", transactions = transactions)
}
##rulesC6 <- apriori(c[[1]],parameter = list(supp = 0.4, conf = 0.7, target = "rules"))
##rulesC6.sub_serious  <- subset(rulesC6, (rhs %in% c("Accident_Severity=Serious"))  ) ## ,"Accident_Severity=Fatal"
##quality(rulesC6)$chiSquared <- interestMeasure(rulesC6, measure="chiSquared", transactions = transactions)
##summary(rulesC6)
##inspect(head(sort(rulesC6, by = "chiSquared"), n=10))
##plot(head(sort(rulesC6, by="chiSquared"), 5),method="graph", control=list(cex=.7))
##rulesC6.sub_serious.sorted <- sort(rulesC6.sub_serious, by="support")
##quality(rulesC6.sub_serious)$lift <- interestMeasure(rulesC6.sub_serious, measure="lift", transactions = transactions)
for( i in 1:6)
{
c[[i]]$freqItems <- apriori(c[[6]], parameter= list(support=0.2, target= "frequent itemsets"))
c[[i]]$freqItemssorted <- sort(c[[i]]$freqItems, by="support")
quality(c[[i]]$freqItems)$lift <- interestMeasure(c[[i]]$freqItems, measure="lift", transactions = transactions)
}
for(i in 1:6)
{
c[[i]]$rules <-apriori(c[[1]],parameter = list(supp = 0.5, conf = 0.7, target = "rules"))
quality(c[[i]]$rules)$chiSquared <- interestMeasure(c[[i]]$rules, measure="chiSquared", transactions = transactions)
}
for( i in 1:6)
{
c[[i]]$freqItems <- apriori(c[[6]], parameter= list(support=0.2, target= "frequent itemsets"))
c[[i]]$freqItems.sorted <- sort(c[[i]]$freqItems, by="support")
quality(c[[i]]$freqItems)$lift <- interestMeasure(c[[i]]$freqItems, measure="lift", transactions = transactions)
}
for( i in 1:6)
{
c[[i]].freqItems <- apriori(c[[6]], parameter= list(support=0.2, target= "frequent itemsets"))
c[[i]].freqItems.sorted <- sort(c[[i]]$freqItems, by="support")
quality(c[[i]]$freqItems)$lift <- interestMeasure(c[[i]]$freqItems, measure="lift", transactions = transactions)
}
for( i in 1:6)
{
c[[i]]$freqItems <- apriori(c[[6]], parameter= list(support=0.2, target= "frequent itemsets"))
c[[i]]$freqItems.sorted <- sort(c[[i]]$freqItems, by="support")
quality(c[[i]]$freqItems)$lift <- interestMeasure(c[[i]]$freqItems, measure="lift", transactions = transactions)
}
for( i in 1:6)
{
c[[i]]$freqItems <- apriori(c[[6]], parameter= list(support=0.2, target= "frequent itemsets"))
##c[[i]]$freqItems.sorted <- sort(c[[i]]$freqItems, by="support")
##quality(c[[i]]$freqItems)$lift <- interestMeasure(c[[i]]$freqItems, measure="lift", transactions = transactions)
}
for( i in 1:6)
{
c[[i]]$freqItems <- apriori(c[[6]], parameter= list(support=0.2, target= "frequent itemsets"))
##c[[i]]$freqItems.sorted <- sort(c[[i]]$freqItems, by="support")
##quality(c[[i]]$freqItems)$lift <- interestMeasure(c[[i]]$freqItems, measure="lift", transactions = transactions)
}
c[[i]].freqItems <- apriori(c[[6]], parameter= list(support=0.2, target= "frequent itemsets"))
freqItemsByCluster = list(c1,c2,c3,c4,c5,c6)
for( i in 1:6)
{
freqItemsByCluster[i]$freqItems <- apriori(c[[i]], parameter= list(support=0.2, target= "frequent itemsets"))
##c[[i]]$freqItems.sorted <- sort(c[[i]]$freqItems, by="support")
##quality(c[[i]]$freqItems)$lift <- interestMeasure(c[[i]]$freqItems, measure="lift", transactions = transactions)
}
freqItemsByCluster = list()
for( i in 1:6)
{
freqItemsByCluster[[i]]$freqItems <- apriori(c[[i]], parameter= list(support=0.2, target= "frequent itemsets"))
##c[[i]]$freqItems.sorted <- sort(c[[i]]$freqItems, by="support")
##quality(c[[i]]$freqItems)$lift <- interestMeasure(c[[i]]$freqItems, measure="lift", transactions = transactions)
}
freqItemsByCluster = list()
for( i in 1:6)
{
freqItemsByCluster[i]$freqItems <- apriori(c[[i]], parameter= list(support=0.2, target= "frequent itemsets"))
##c[[i]]$freqItems.sorted <- sort(c[[i]]$freqItems, by="support")
##quality(c[[i]]$freqItems)$lift <- interestMeasure(c[[i]]$freqItems, measure="lift", transactions = transactions)
}
freqItemsByCluster = list()
for( i in 1:6)
{
freqItemsByCluster[i]$freqItems <- apriori(c[[i]], parameter= list(support=0.5, target= "frequent itemsets"))
##c[[i]]$freqItems.sorted <- sort(c[[i]]$freqItems, by="support")
##quality(c[[i]]$freqItems)$lift <- interestMeasure(c[[i]]$freqItems, measure="lift", transactions = transactions)
}
```{r freqItemsByCluster}
for( i in 1:6)
{
freqItemsByCluster[i]$freqItems <- apriori(c[[i]], parameter= list(support=0.5, target= "frequent itemsets"))
freqItemsByCluster[i]$freqItems <- sort(freqItemsByCluster[i]$freqItems, by="support")
quality(c[[i]]$freqItems)$lift <- interestMeasure(freqItemsByCluster[i], measure="lift", transactions = transactions)
}
freqItemsByCluster = list()
for( i in 1:6)
{
freqItemsByCluster[i]$freqItems <- apriori(c[[i]], parameter= list(support=0.5, target= "frequent itemsets"))
freqItemsByCluster[i]$freqItems.sorted <- sort(freqItemsByCluster[i]$freqItems, by="support")
quality(c[[i]]$freqItems)$lift <- interestMeasure(freqItemsByCluster[i], measure="lift", transactions = transactions)
}
##itemFrequencyPlot(c[[2]], population = transactions, support = 0.2)
freqItemsByCluster = list()
for( i in 1:6)
{
freqItemsByCluster[i]$freqItems <- apriori(c[[i]], parameter= list(support=0.5, target= "frequent itemsets"))
c[[i]]$freqItems <- freqItemsByCluster[i]$freqItems
##freqItemsByCluster[i]$freqItems.sorted <- sort(freqItemsByCluster[i]$freqItems, by="support")
##quality(c[[i]]$freqItems)$lift <- interestMeasure(freqItemsByCluster[i], measure="lift", transactions = transactions)
}
source('C:/Users/José/Desktop/dmProject/DataMining/test.R')
```{r cv}
```
plot(cv)
```
if(!exists("init", mode="function")) source("load.R")
if(!exists("dataFrameToTransaction", mode="function")) source("loadData.R")
if(!exists("calcDissimilarity", mode="function")) source("clustering.R")
init()
raw <- readDataFrame()
transactions <- dataFrameToTransaction(raw)
s <- getSample(transactions,2000)
diss <- calcDissimilarity(transactions)
cv <- getClusteringVectors(diss)
##s <- silhouette(transactions,cv)
## compare original and processed df
clu <- hCluster(diss)
##plot hClust
allLabels <- predict(transactions[cv$medoids], transactions,method = "Jaccard")
##clusplot(cv, main = "Cluster plot, k = 6", color = TRUE)
c <- split(transactions, allLabels)
##itemFrequencyPlot(c[[2]], population = transactions, support = 0.2)
freqItemsByCluster = list()
for( i in 1:6)
{
##freqItemsByCluster[i]$freqItems <- apriori(c[[i]], parameter= list(support=0.5, target= "frequent itemsets"))
##c[[i]]$freqItems <- apriori(c[[i]], parameter= list(support=0.5, target= "frequent itemsets"))
##freqItemsByCluster[i]$freqItems.sorted <- sort(freqItemsByCluster[i]$freqItems, by="support")
##quality(c[[i]]$freqItems)$lift <- interestMeasure(freqItemsByCluster[i], measure="lift", transactions = transactions)
}
rulesByCluster = list()
for(i in 1:6)
{
##rulesByCluster[i]$rules <-apriori(c[[i]],parameter = list(supp = 0.5, conf = 0.7, target = "rules"))
##quality(rulesByCluster[i]$rules)$chiSquared <- interestMeasure(rulesByCluster[i]$rules, measure="chiSquared", transactions = transactions)
}
##rulesC6 <- apriori(c[[1]],parameter = list(supp = 0.4, conf = 0.7, target = "rules"))
##rulesC6.sub_serious  <- subset(rulesC6, (rhs %in% c("Accident_Severity=Serious"))  )
##quality(rulesC6)$chiSquared <- interestMeasure(rulesC6, measure="chiSquared", transactions = transactions)
##summary(rulesC6)
##inspect(head(sort(rulesC6, by = "chiSquared"), n=10))
##plot(head(sort(rulesC6, by="chiSquared"), 5),method="graph", control=list(cex=.7))
##rulesC6.sub_serious.sorted <- sort(rulesC6.sub_serious, by="support")
##quality(rulesC6.sub_serious)$lift <- interestMeasure(rulesC6.sub_serious, measure="lift", transactions = transactions)
silhouette <- silhouette(cv)
plot(silhouette)
sortSilhouette(silhouette)
plot(silhouette)
plot(clu)
help(cutree)
l <- list()
l[[1]] <- 10
l[[2]] <- 10
l
l[[3]] <- 10:20
l <- list(a=12,b=10:20)
l
l[a]
l['a']
l[['a']]
l$a
for( i in 1:6)
{
freqItemsByCluster[[i]]$freqItems <- apriori(c[[i]], parameter= list(support=0.5, target= "frequent itemsets"))
##c[[i]]$freqItems <- apriori(c[[i]], parameter= list(support=0.5, target= "frequent itemsets"))
##freqItemsByCluster[i]$freqItems.sorted <- sort(freqItemsByCluster[i]$freqItems, by="support")
##quality(c[[i]]$freqItems)$lift <- interestMeasure(freqItemsByCluster[i], measure="lift", transactions = transactions)
}
freqItemsByCluster = list()
for( i in 1:6)
{
freqItemsByCluster[[i]]$freqItems <- apriori(c[[i]], parameter= list(support=0.5, target= "frequent itemsets"))
##c[[i]]$freqItems <- apriori(c[[i]], parameter= list(support=0.5, target= "frequent itemsets"))
##freqItemsByCluster[i]$freqItems.sorted <- sort(freqItemsByCluster[i]$freqItems, by="support")
##quality(c[[i]]$freqItems)$lift <- interestMeasure(freqItemsByCluster[i], measure="lift", transactions = transactions)
}
for( i in 1:6)
{
freqItemsByCluster[[i]] <- apriori(c[[i]], parameter= list(support=0.5, target= "frequent itemsets"))
##c[[i]]$freqItems <- apriori(c[[i]], parameter= list(support=0.5, target= "frequent itemsets"))
##freqItemsByCluster[i]$freqItems.sorted <- sort(freqItemsByCluster[i]$freqItems, by="support")
##quality(c[[i]]$freqItems)$lift <- interestMeasure(freqItemsByCluster[i], measure="lift", transactions = transactions)
}
freqItemsByCluster = list()
for( i in 1:6)
{
freqItemsByCluster[[i]]['freq'] <- apriori(c[[i]], parameter= list(support=0.5, target= "frequent itemsets"))
##c[[i]]$freqItems <- apriori(c[[i]], parameter= list(support=0.5, target= "frequent itemsets"))
##freqItemsByCluster[i]$freqItems.sorted <- sort(freqItemsByCluster[i]$freqItems, by="support")
##quality(c[[i]]$freqItems)$lift <- interestMeasure(freqItemsByCluster[i], measure="lift", transactions = transactions)
}
freqItemsByCluster = list()
for( i in 1:6)
{
freqItemsByCluster[[i]]['freq'] <- apriori(c[[i]], parameter= list(support=0.5, target= "frequent itemsets"))
##c[[i]]$freqItems <- apriori(c[[i]], parameter= list(support=0.5, target= "frequent itemsets"))
##freqItemsByCluster[i]$freqItems.sorted <- sort(freqItemsByCluster[i]$freqItems, by="support")
##quality(c[[i]]$freqItems)$lift <- interestMeasure(freqItemsByCluster[i], measure="lift", transactions = transactions)
}
freqItemsByCluster[[i]]
freqItemsByCluster = list()
for( i in 1:6)
{
freqItemsByCluster[[i]] <- apriori(c[[i]], parameter= list(support=0.5, target= "frequent itemsets"))
##c[[i]]$freqItems <- apriori(c[[i]], parameter= list(support=0.5, target= "frequent itemsets"))
##freqItemsByCluster[i]$freqItems.sorted <- sort(freqItemsByCluster[i]$freqItems, by="support")
##quality(c[[i]]$freqItems)$lift <- interestMeasure(freqItemsByCluster[i], measure="lift", transactions = transactions)
}
freqItemsByCluster = list()
for( i in 1:6)
{
freqItemsByCluster[[i]] <- apriori(c[[i]], parameter= list(support=0.5, target= "frequent itemsets"))
freqItemsByCluster[[i]].sorted <- sort(freqItemsByCluster[[i]], by="support")
quality(c[[i]])$lift <- interestMeasure(freqItemsByCluster[[i]], measure="lift", transactions = transactions)
}
freqItemsByCluster = list()
for( i in 1:6)
{
freqItemsByCluster[[i]] <- apriori(c[[i]], parameter= list(support=0.5, target= "frequent itemsets"))
freqItemsByCluster[[i]].sorted <- sort(freqItemsByCluster[[i]], by="support")
quality(freqItemsByCluster[[i]])$lift <- interestMeasure(freqItemsByCluster[[i]], measure="lift", transactions = transactions)
}
for( i in 1:6)
{
freqItemsByCluster[[i]] <- apriori(c[[i]], parameter= list(support=0.5, target= "frequent itemsets"))
freqItemsByCluster[[i]].sorted <- sort(freqItemsByCluster[[i]], by="support")
quality(freqItemsByCluster[[i]])$lift <- interestMeasure(freqItemsByCluster[[i]], measure="lift", transactions = transactions)
}
freqItemsByCluster = list()
for( i in 1:6)
{
freqItemsByCluster[[i]] <- apriori(c[[i]], parameter= list(support=0.5, target= "frequent itemsets"))
freqItemsByCluster[[i]].sorted <- sort(freqItemsByCluster[[i]], by="support")
quality(freqItemsByCluster[[i]])$lift <- interestMeasure(c[[i]], measure="lift", transactions = transactions)
}
freqItemsByCluster = list()
for( i in 1:6)
{
freqItemsByCluster[[i]] <- apriori(c[[i]], parameter= list(support=0.5, target= "frequent itemsets"))
freqItemsByCluster[[i]].sorted <- sort(freqItemsByCluster[[i]], by="support")
##quality(freqItemsByCluster[[i]])$lift <- interestMeasure(c[[i]], measure="lift", transactions = transactions)
}
freqItemsByCluster = list()
for( i in 1:6)
{
freqItemsByCluster[[i]] <- apriori(c[[i]], parameter= list(support=0.5, target= "frequent itemsets"))
##freqItemsByCluster[[i]].sorted <- sort(freqItemsByCluster[[i]], by="support")
quality(freqItemsByCluster[[i]])$lift <- interestMeasure(c[[i]], measure="lift", transactions = transactions)
}
freqItemsByCluster = list()
for( i in 1:6)
{
freqItemsByCluster[[i]] <- apriori(c[[i]], parameter= list(support=0.5, target= "frequent itemsets"))
##freqItemsByCluster[[i]].sorted <- sort(freqItemsByCluster[[i]], by="support")
quality(freqItemsByCluster[[i]])$lift <- interestMeasure(freqItemsByCluster[[i]], measure="lift", transactions = transactions)
}
freqItemsByCluster = list()
for( i in 1:6)
{
freqItemsByCluster[[i]] <- apriori(c[[i]], parameter= list(support=0.5, target= "frequent itemsets"))
##freqItemsByCluster[[i]].sorted <- sort(freqItemsByCluster[[i]], by="support")
quality(freqItemsByCluster[[i]])$lift <- interestMeasure(freqItemsByCluster[[i]], measure="lift", transactions = transactions)
inspect(head(sort(freqItemsByCluster[[i]], by = "lift"), n=3))
}
for (i in 1:6)
{
inspect(head(sort(freqItemsByCluster[[i]], by = "lift"), n=3))
}
rulesByCluster = list()
for(i in 1:6)
{
rulesByCluster[[i]] <-apriori(c[[i]],parameter = list(supp = 0.5, conf = 0.7, target = "rules"))
quality(rulesByCluster[i])$chiSquared <- interestMeasure(rulesByCluster[[i]], measure="chiSquared", transactions = transactions)
}
rulesByCluster = list()
for(i in 1:6)
{
rulesByCluster[[i]] <-apriori(c[[i]],parameter = list(supp = 0.5, conf = 0.7, target = "rules"))
quality(rulesByCluster[[i]])$chiSquared <- interestMeasure(rulesByCluster[[i]], measure="chiSquared", transactions = transactions)
}
for (i in 1:6)
{
plot(head(sort(rulesByCluster[[i]] , by="chiSquared"), 5),method="graph", control=list(cex=.7))
}
for (i in 1:6)
{
plot(head(sort(freqItemsByCluster[[i]] , by="lift"), 5),method="graph",control=list(cex=.7))
}
source('C:/Users/José/Desktop/dmProject/DataMining/test.R')
plot(silhouette)
source('C:/Users/José/Desktop/dmProject/DataMining/clustering.R')
source('C:/Users/José/Desktop/dmProject/DataMining/test.R')
plot(silhouette)
help(silhouette)
silhouette <- silhouette(cv,dmatrix=diss)
plot(silhouette)
plot(cv)
summary(silhouette)
source('C:/Users/José/Desktop/dmProject/DataMining/clustering.R')
diss <- calcDissimilarity(transactions)
cv <- getClusteringVectors(diss)
silhouette <- silhouette(cv,dmatrix=diss)
plot(cv)
plot(silhouette)
silhouette <- silhouette(cv$clustering,dmatrix=diss)
silhouette <- silhouette(cv$clustering)
silhouette <- silhouette(cv$clustering,dist=diss)
windows()
plot(silhouette)
##windows()
plot(silhouette)
silhouette <- silhouette(cv$clustering,dist=diss)
windows()
##windows()
plot(silhouette)
##windows()
plot(silhouette)
dev.off()
dev.off()
##windows()
plot(silhouette)
plot(silhouette)
